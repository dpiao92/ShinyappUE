library(stringr)
library(shiny)
library(DT)
library(ggplot2)
library(scales)

claiminfo2 <-read.csv("X:/Actuarial/Claims_Project/claiminfo2bin.csv")
claiminfo2$LOSSDATE<-as.Date(claiminfo2[,"LOSSDATE"],"%m/%d/%y")
claiminfo2$LIMIT<-paste("$",format(claiminfo2$LIMIT, big.mark=","),sep="")
claiminfo2$RETENTION<-paste("$",format(claiminfo2$RETENTION, big.mark=","),sep="")
claiminfo2$LOBNEW <- claiminfo2[,"LINEOFBUSINESS"]
claiminfo2$LOBNEW <- ifelse(claiminfo2$LINEOFBUSINESS %in% c("DAL","DBC","DGL","SAF","SAL","SBC","SBO","SCF","SGF","SGL","SOF"),
                            "Public Schools",ifelse(claiminfo2$LINEOFBUSINESS %in% c("CGX","GLF","GLU","GLX"),"GLX/U",paste(claiminfo2$LINEOFBUSINESS)))
claiminfo2$INSTCODENEW <- claiminfo2[,"INSTCODE"]
claiminfo2$INSTCODENEW <- ifelse(claiminfo2$INSTCODE %in% c("PS","SD"),"PS/SD",ifelse(claiminfo2$INSTCODE %in% c("U4","R4"),"U4/R4",ifelse(claiminfo2$INSTCODE %in% c("U2","R2"),"U2/R2",paste(claiminfo2$INSTCODE))))
claiminfo2$LossYN <- ifelse(claiminfo2$TOTALINCURRED!=0,"Y","N")

ui<-fluidPage(
    
    tags$head(
        tags$style(HTML("
                        .shiny-output-error-ERRORmessage {
                        font-size: 20px;
                        color: blue;
                        
                        }
                        "))),
    
    
    
    sidebarLayout(
        sidebarPanel(
            
            selectizeInput(inputId = "words1",
                           label = "Enter search terms",choices = colnames(claiminfo2[,2:length(claiminfo2)]), 
                           multiple = TRUE
            ),
            
            radioButtons("logic", label = "Word Logic",
                         choices = list("Or" = 1, "And" = 2), 
                         selected = 1),
            
            dateRangeInput("dates", label = "Loss Date range", start = "01-01-2010", end = "12-31-2014", format = "mm/dd/yy"),
            
            
            checkboxGroupInput("checkboxLOB", label = "Line of Business", 
                               c("ELL"="ELL","CGL" = "CGL","GLX/U"="GLX/U","BLX"="BLX","EBL"="EBL","LPL"="LPL","Public Schools"="Public Schools"),selected = c("ELL","CGL","GLX/U","BLX","EBL","LPL","Public Schools"),inline = FALSE),
            checkboxGroupInput("checkboxICode", label = "Institution Code", 
                               c("IN"="IN","O" = "O","PS/SD"="PS/SD","U4/R4"="U4/R4","U2/R2"="U2/R2"),selected = c("IN","O","PS/SD","U4/R4","U2/R2"),inline = FALSE),
            checkboxGroupInput("checkboxInc_Claim", label = "Claim/Incident", 
                               c("Claim" = "C","Incident"="I"),selected = c("C","I"),inline = FALSE),
            checkboxGroupInput("checkboxLoss", label = "Incurred Loss?", 
                               c("Yes" = "Y","No"="N"),selected = c("Y","N"),inline = TRUE),
            downloadButton('downloadData', 'Download')
            ,width = 3),
        mainPanel(
            tabsetPanel(type = "tabs", 
                        tabPanel("List of Claims", dataTableOutput(outputId = "table")), 
                        tabPanel("Summary",dataTableOutput(outputId = "table1")),
                        tabPanel("Plot", plotOutput("plot1"),plotOutput("plot2"))
            )
        )
    )
        )

server<-function(input,output){
    datasetInput <- reactive({
        words2 <- unlist(str_split(input$words1,","))
        lob <- unlist(str_split(input$checkboxLOB,","))
        inst_code <- unlist(str_split(input$checkboxICode,","))
        inc_claim <- unlist(str_split(input$checkboxInc_Claim,","))
        lossyn <- unlist(str_split(input$checkboxLoss,","))
        
        for (i in 1:length(words2)) {
            trimwords <- str_trim(words2[i])
            words2[i] <- trimwords
        }
        
        validate(
            need(lob != "","Please select at least one Line of Business"),
            errorClass = "ERRORmessage"
        )
        
        validate(
            need(inst_code != "", "Please select at least one Institution Code"),
            errorClass = "ERRORmessage"
        )
        
        validate(
            need(inc_claim != "", "Please select a choice for Claim/Incident"),
            errorClass = "ERRORmessage"
        )
        
        validate(
            need(lossyn != "", "Please select a choice for Incurred Loss?"),
            errorClass = "ERRORmessage"
        )
        
        if(length(words2) == 0){
            
            claiminfo2$xxtotal <- 1
            claiminfo3 <- claiminfo2[,c("Category","ISN","SCHOOLNAME","LINEOFBUSINESS","LOSSDATE","TOTALINCURRED","LIMIT","RETENTION","INSTCODE","INCIDENTORCLAIM","LOBNEW","INSTCODENEW","LossYN","xxtotal")]
            claiminfo4 <- subset(claiminfo3,claiminfo3[,"LOSSDATE"]>=input$dates[1] & claiminfo3[,"LOSSDATE"]<=input$dates[2]& claiminfo3[,"LOBNEW"] %in% c(lob)& claiminfo3[,"INSTCODENEW"] %in% c(inst_code)& claiminfo3[,"INCIDENTORCLAIM"] %in% c(inc_claim)& claiminfo3[,"LossYN"] %in% c(lossyn))
            
            claiminfo4
        }
        
        else if (length(words2)==1){
            
            claiminfo2$xxtotal <- rowsum(claiminfo2[, c(words2)],claiminfo2$Category)
            claiminfo3 <- claiminfo2[,c("Category","ISN","SCHOOLNAME","LINEOFBUSINESS","LOSSDATE","TOTALINCURRED","LIMIT","RETENTION","INSTCODE","INCIDENTORCLAIM","LOBNEW","INSTCODENEW","LossYN","xxtotal")]
            claiminfo4 <- subset(claiminfo3,claiminfo3[,"xxtotal"] >0 & claiminfo3[,"LOSSDATE"]>=input$dates[1] & claiminfo3[,"LOSSDATE"]<=input$dates[2] & claiminfo3[,"LOBNEW"] %in% c(lob)& claiminfo3[,"INSTCODENEW"] %in% c(inst_code)& claiminfo3[,"INCIDENTORCLAIM"] %in% c(inc_claim)& claiminfo3[,"LossYN"] %in% c(lossyn))
            
            claiminfo4 
        }
        
        
        else if(input$logic==1)
        {claiminfo2$xxtotal <-rowSums(claiminfo2[,c(words2)])
        claiminfo3 <- claiminfo2[,c("Category","ISN","SCHOOLNAME","LINEOFBUSINESS","LOSSDATE","TOTALINCURRED","LIMIT","RETENTION","INSTCODE","INCIDENTORCLAIM","LOBNEW","INSTCODENEW","LossYN","xxtotal")]
        claiminfo4 <- subset(claiminfo3,claiminfo3[,"xxtotal"] >0 & claiminfo3[,"LOSSDATE"]>=input$dates[1] & claiminfo3[,"LOSSDATE"]<=input$dates[2] & claiminfo3[,"LOBNEW"] %in% c(lob)& claiminfo3[,"INSTCODENEW"] %in% c(inst_code)& claiminfo3[,"INCIDENTORCLAIM"] %in% c(inc_claim)& claiminfo3[,"LossYN"] %in% c(lossyn))
        
        
        claiminfo4 }
        
        else
        {claiminfo3 <- claiminfo2[,c("Category","ISN","SCHOOLNAME","LINEOFBUSINESS","LOSSDATE","TOTALINCURRED","LIMIT","RETENTION","INSTCODE","INCIDENTORCLAIM","LOBNEW","INSTCODENEW","LossYN")]
        claiminfo6 <- claiminfo2[,c(words2)]
        claiminfo6[(claiminfo6>1)] <-1
        claiminfo3$xxtotal <-rowSums(claiminfo6[,c(words2)])
        claiminfo4 <- subset(claiminfo3,claiminfo3[,"xxtotal"] ==length(words2) & claiminfo3[,"LOSSDATE"]>=input$dates[1] & claiminfo3[,"LOSSDATE"]<=input$dates[2] & claiminfo3[,"LOBNEW"] %in% c(lob) & claiminfo3[,"INSTCODENEW"] %in% c(inst_code)& claiminfo3[,"INCIDENTORCLAIM"] %in% c(inc_claim)& claiminfo3[,"LossYN"] %in% c(lossyn))
        
        claiminfo4}
        
        
    })
    
    
    output$table <- renderDataTable({
        claiminfo<-datasetInput()
        names(claiminfo)[c(1,3:10)] <- c("Claim Number","Institution Name","Line of Business","Loss Date","Total Incurred", "Limit", "Retention", "Institution Code", "Incident or Claim")
        
        claiminfo[,"Claim Number"] <- as.character(claiminfo[,"Claim Number"])
        claiminfo[,"Total Incurred"] <- as.numeric(claiminfo[,"Total Incurred"])
        claiminfo[,"Total Incurred"] <- dollar(claiminfo[,"Total Incurred"])
        
        claiminfo
    },class = 'display',rownames = FALSE,filter = list(position = 'top',clear = FALSE),options = list(
        columnDefs = list(list(className = 'dt-center',targets = 1:8),list(visible=FALSE, targets=9:12) 
        )))
    
    
    output$table1 <- renderDataTable({
        claiminfo4 <- datasetInput()
        
        claiminfoELL <- subset(claiminfo4,claiminfo4[,"LOBNEW"]=="ELL")
        f1 <- formatC(as.numeric(dim(claiminfoELL)[[1]]),format = "f", digits = 0, big.mark = ",")
        s1 <- paste0("$", formatC(as.numeric(sum(claiminfoELL[,"TOTALINCURRED"])), format="f", digits=2, big.mark=","))
        claiminfoCGL <- subset(claiminfo4,claiminfo4[,"LOBNEW"]=="CGL")
        f2 <- formatC(as.numeric(dim(claiminfoCGL)[[1]]),format = "f", digits = 0, big.mark = ",")
        s2 <- paste0("$", formatC(as.numeric(sum(claiminfoCGL[,"TOTALINCURRED"])), format="f", digits=2, big.mark=","))
        claiminfoGLXU <- subset(claiminfo4,claiminfo4[,"LOBNEW"]=="GLX/U")
        f3 <- formatC(as.numeric(dim(claiminfoGLXU)[[1]]),format = "f", digits = 0, big.mark = ",")
        s3 <- paste0("$", formatC(as.numeric(sum(claiminfoGLXU[,"TOTALINCURRED"])), format="f", digits=2, big.mark=","))
        claiminfoBLX <- subset(claiminfo4,claiminfo4[,"LOBNEW"]=="BLX")
        f4 <- formatC(as.numeric(dim(claiminfoBLX)[[1]]),format = "f", digits = 0, big.mark = ",")
        s4 <- paste0("$", formatC(as.numeric(sum(claiminfoBLX[,"TOTALINCURRED"])), format="f", digits=2, big.mark=","))
        claiminfoEBL <- subset(claiminfo4,claiminfo4[,"LOBNEW"]=="EBL")
        f5 <- formatC(as.numeric(dim(claiminfoEBL)[[1]]),format = "f", digits = 0, big.mark = ",")
        s5 <- paste0("$", formatC(as.numeric(sum(claiminfoEBL[,"TOTALINCURRED"])), format="f", digits=2, big.mark=","))
        claiminfoLPL <- subset(claiminfo4,claiminfo4[,"LOBNEW"]=="LPL")
        f6 <- formatC(as.numeric(dim(claiminfoLPL)[[1]]),format = "f", digits = 0, big.mark = ",")
        s6 <- paste0("$", formatC(as.numeric(sum(claiminfoLPL[,"TOTALINCURRED"])), format="f", digits=2, big.mark=","))
        claiminfoPublic <- subset(claiminfo4,claiminfo4[,"LOBNEW"]=="Public Schools")
        f7 <- formatC(as.numeric(dim(claiminfoPublic)[[1]]),format = "f", digits = 0, big.mark = ",")
        s7 <- paste0("$", formatC(as.numeric(sum(claiminfoPublic[,"TOTALINCURRED"])), format="f", digits=2, big.mark=","))
        words2 <- unlist(str_split(input$words1,","))
        total.number <- dim(claiminfo4)
        f8 <- paste(formatC(as.numeric(total.number[[1]]),format = "f",digits = 0,big.mark = ","))
        totalloss <- sum(claiminfo4[,"TOTALINCURRED"])
        s8 <- paste0("$", formatC(as.numeric(totalloss), format="f", digits=2, big.mark=","))
        first.row <- c(f1,f2,f3,f4,f5,f6,f7,f8)
        second.row <- c(s1,s2,s3,s4,s5,s6,s7,s8)
        display.table <- rbind(first.row,second.row)
        colnames(display.table) <- c("ELL","CGL","GLX/U","BLX","EBL","LPL","Public Schools","Total")
        
        display.table
        
    }, rownames = c("Number of Claims","Total Incurred"),options = list(searching = FALSE,paging = FALSE,bInfo = 0, autoWidth = TRUE,
                                                                        columnDefs = list(list(className = 'dt-center',targets = 1:8))))
    
    output$plot1 <- renderPlot({
        claiminfo4 <- datasetInput()
        counts<-aggregate(claiminfo4[,"Category"], by=list(Category=as.numeric(format(claiminfo4[,"LOSSDATE"], "%Y"))), FUN=length)
        ggplot(counts, aes(x=Category, y=x)) + geom_area(fill="blue",alpha=.4) +geom_point(color="blue",size=3) + geom_line(color="blue",size=1)+labs(title ="Claims by Year", x ="Loss Year" , y ="Total Claims")+scale_y_continuous(limits = c(0, NA),labels=comma)
    })
    
    output$plot2 <- renderPlot({
        claiminfo4 <- datasetInput()
        losses<-aggregate(claiminfo4[,"TOTALINCURRED"], by=list(Category=as.numeric(format(claiminfo4[,"LOSSDATE"], "%Y"))), FUN=sum)
        ggplot(losses, aes(x=Category, y=x)) + geom_area(fill="blue",alpha=.4) +geom_point(color="blue",size=3) + geom_line(color="blue",size=1)+labs(title ="Incurred by Year", x ="Loss Year" , y ="Total Incurred")+scale_y_continuous(limits = c(0, NA),labels=dollar)
    })
    
    datasetInputdl <- reactive({
        claiminfo4 <-datasetInput()
        names(claiminfo)[c(1,3:10)] <- c("Claim Number","Institution Name","Line of Business","Loss Date","Total Incurred", "Limit", "Retention", "Institution Code", "Incident or Claim")
        claiminfo4[ , -which(names(claiminfo4) %in% c("LOBNEW","INSTCODENEW","LossYN","xxtotal"))]
    })
    
    
    output$downloadData <- downloadHandler(
        filename = function() {
            paste('data_', Sys.Date(), '.csv', sep='')
        },
        content = function(file) {
            write.csv(datasetInputdl(), file, row.names = FALSE)
        }
    )    
}

shinyApp(ui = ui, server = server) 
